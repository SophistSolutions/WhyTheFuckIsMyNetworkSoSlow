Top priority bug:


	> backgorund thread NETWORK discovery
		Network disc module
		   Return ALL Current (even if disconencted)
		   Do logic so 'refrsh tick' wakeup called on Webservice calls?
		   Then time based scanning for new networks.
		   Say up to 60 minutes if no wakeups.
		   But otherwise typically around once ever 30 seconds (if actively getting WS calls).
	

	  > SIMILAR background thread doing Device discovery 
	     > checks all current networks
		 > similar slowdown if inactive
		 > periodcally call arp -a to get a list of candidates
		 > peridocally check candidates randomly from active networks
		 > PING them for now - but eventually also try other ways like connecting to port 22, etc.
		 > Store MUCH more data on discovered devices
		 > Load/save this to/from Database
		 > have ALL CURRENT (for network) and maybe (ALL EVER) for network APIs to do fetches

	


	>	DEVICES DUPLICATED 

	> Add suport for ARP -a for discovery

	>	NEXT - SEE IF SOMETHING SIMPLE TODO TO GET BETTER GUESSES AT DEVICE deviceType
		(maybe replace TYPE with ICON, and have a list of icons
		and with persistence UI can associate icons with devices?
		)

	>	At least someting so sonos speakers show up special? Maybe have CLASES (can be in more than one claass
		and if you support a given INTERFACE you get that class)

		Classes = "Windows device" | "Unix Device"  (and windows might be in both with WSL)
		if it shows - windows means has 'netbios and ???'
		'MacOS device'?

			Windows Media Server

			speakers

			Router (or better - Network Infrastrucutre for routers, WAPs etc)
			Maybe ROUTER AND NetworkInfrastrucutre

			(then GUI can devide how to 'show' if in multiple classes)



-----
CLEANUP OUTPUT

  Compiling Backend/Sources/Service.cpp ...
         Compiling Backend/Sources/WebServices/WebServer.cpp ...
         Linking  $StroikaRoot/Builds/Release/WhyTheFuckIsMyNetworkSoSlow/WhyTheFuckIsMyNetworkSoSlow-Backend...

(new stroikaroot .... stuff)

-----

	Cleanup blaterh from html make (redirect to outfile)

----

	DEFAULT PORT = config file and command-line args override and config-file-location override???
		/var/opt/WhyTheFuckIsMyNetworkSoSlow/Configuration/xxx
			StaticContentWebServerAddress : default is 0.0.0.0
			StaticContentWebServerPort
			WebServiceAddress : default is 0.0.0.0
			WebServicePort

		.../Configuration-Defaults
			Print out the default values for each configurable value, which can be used to update config file

------

http://localhost:8080/Network/97979b96-9967-6696-95cb-6495706c66c9
	ONLY prints ONE Network_Address - should print BOTH the IPv4 and IPv6 networks there.
	its attached interafce http://localhost:8080/NetworkInterface/56f0fbd0-a2ec-4e00-9c05-61e449fdbfc4
		shows several ipv6 addresses, with probably:
			fe80::b80f:7c29:847f:2322/64 being the one I should label as the network? Maybe not. Maybe its fe80:: that is the network cuz the rest SB 0's... (lower 64 bits)
			OR could be ff02::???

-----

	//// MAYBE then add APIs
	// to measure TIME BETWEEN NODES and TIME TO ADDRESS
	// AND MAYBE HAVE "MONTIORS - where we defifine set of links to montir and then can check back on historical
	values for those?"


====

		>	Document new clearer design - Networks, NetworkIntraces, Devices

		>	Document TIME aspect (param to queries saying "now" or "some temporal notion") - applies to top level queries and
			queries in a network (filtered), or even queries by ID (e.g. /Device/xxxx?time=recent-average?)


		>	Document prelim ideas on measurements, like device-2-device times (disatnce) and how they get stored

----

Under docker:

00007fdd7e147700][0002.603]                  No speed for interface lo, errno=95
[0x00007fdd7e147700][0002.603]                  ethtool_cmd_speed (&edata)=10000
[0x00007fdd7e147700][0002.607]                  <IO::Network::Socket::Bind (sockAddr=INADDR_ANY:1900 bindFlags.fReUseAddr=true)/>
[0x00007fdd7e147700][0002.607]                  <IO::Network::Socket::JoinMulticastGroup (iaddr=239.255.255.250 onInterface=INADDR_ANY)/>
[0x00007fdd7e147700][0002.608]                  <IO::Network::Socket::Bind (sockAddr=in6addr_any:1900 bindFlags.fReUseAddr=true)/>
[0x00007fdd7e147700][0002.609]                  <IO::Network::Socket::JoinMulticastGroup (iaddr=ff02::c onInterface=INADDR_ANY)> {
[0x00007fdd7e147700][0002.655]                          errno_ErrorException::Throw (19) - throwing errno_ErrorException 'No such device (errno: 19)' from /usr/lib/x86_64-linux-gnu/libasan.so.4(+0x558c0) [0x7fdd84ca88c0]; ./Builds/Debug/WhyTheFuckIsMyNetworkSoSlow/WhyTheFuckIsMyNetworkSoSlow-Backend(Stroika::Foundation::Debug::BackTrace[abi:cxx11](unsigned int)+0x22b) [0x55bb03f5f5b5]; ./Builds/Debug/WhyTheFuckIsMyNetworkSoSlow/WhyTheFuckIsMyNetworkSoSlow-Backend(Stroika::Foundation::Execution::Private_::GetBT_ws[abi:cxx11]()+0xba) [0x55bb03f73834]; ./Builds/Debug/WhyTh



>>> HANDLE BETTER when multicast crap doesn't work. Seems common enough - just log it as an erorr and set some error state, but keep running
!!!!


------------------------------------------


>>> NEXT SIMPLE FUNCTION
	>	ComputeAverageTimeToInternet()
		Run a tracert, and stop at the first public IP address. (or navigate to www.sophists.com, and www.google.com, and grab meet of two paths)

		Maybe option for two notions of internet

		>	Take that function - and somehow expopse it as REST WS API
			grab current value, and keep running in background - every 5 minutes, and report statistics

		>	This is a very primitive first draft/try - but the starting point for collecting stats



------------------------------

> building on Linux (BLOW) doesn't work

	(restest)

 ----
 
 >>> In discovery - look at location, and then fetch that location (at least sometimes) in xml
		http://192.168.244.1:47956/rootDesc.xml

		and that maybe info about the device - in that case it was - with <friendlyname> which we can diospaly and <deviceType>
urn:schemas-upnp-org:device:InternetGatewayDevice:1
</deviceType>


> Need to make a UUID property for devices for fronted to use to identify selected or not


>>>> Check for IF HAS PERMISSIONS TO OPEN PORT 80 and GIVE BETTER ERROR MESSAGE